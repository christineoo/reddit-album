(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{209:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mitt = __webpack_require__(719);\n\nvar _mitt2 = _interopRequireDefault(_mitt);\n\nvar _tabbable = __webpack_require__(720);\n\nvar _tabbable2 = _interopRequireDefault(_tabbable);\n\nvar _animationBus = __webpack_require__(538);\n\nvar _animationBus2 = _interopRequireDefault(_animationBus);\n\nvar _resizeObserverPolyfill = __webpack_require__(723);\n\nvar _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);\n\nvar _PagerElement3 = __webpack_require__(724);\n\nvar _PagerElement4 = _interopRequireDefault(_PagerElement3);\n\nvar _utils = __webpack_require__(514);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TRANSFORM = __webpack_require__(725)('transform');\nvar isWindowDefined = typeof window !== 'undefined';\n\nvar Track = function (_PagerElement) {\n  _inherits(Track, _PagerElement);\n\n  function Track() {\n    _classCallCheck(this, Track);\n\n    return _possibleConstructorReturn(this, (Track.__proto__ || Object.getPrototypeOf(Track)).apply(this, arguments));\n  }\n\n  _createClass(Track, [{\n    key: 'getStyles',\n    value: function getStyles(trackPosition) {\n      var _pager$getPositionVal = this.pager.getPositionValue(trackPosition),\n          x = _pager$getPositionVal.x,\n          y = _pager$getPositionVal.y;\n\n      var trackSize = this.pager.getTrackSize();\n      var style = _defineProperty({}, TRANSFORM, 'translate3d(' + x + 'px, ' + y + 'px, 0)');\n\n      if (trackSize) {\n        var _pager$options = this.pager.options,\n            axis = _pager$options.axis,\n            viewsToShow = _pager$options.viewsToShow;\n\n        var dimension = axis === 'x' ? 'width' : 'height';\n\n        style[dimension] = viewsToShow === 'auto' ? trackSize : this.pager.views.length / viewsToShow * 100 + '%';\n      }\n\n      return style;\n    }\n  }]);\n\n  return Track;\n}(_PagerElement4.default);\n\nvar View = function (_PagerElement2) {\n  _inherits(View, _PagerElement2);\n\n  function View(_ref) {\n    var index = _ref.index,\n        restOptions = _objectWithoutProperties(_ref, ['index']);\n\n    _classCallCheck(this, View);\n\n    var _this2 = _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this, restOptions));\n\n    _this2.index = index;\n    _this2.inBounds = true;\n    _this2.tabbableChildren = [];\n    _this2.setCurrent(false);\n    _this2.setVisible(false);\n    _this2.setTarget();\n    _this2.setOrigin();\n\n    // TODO: look into getting rid of setTimeout\n    // not sure the reason for needing setTimeout in order to get proper children,\n    // might be due to something in React that we're not doing at the right time\n    setTimeout(function () {\n      _this2.tabbableChildren = (0, _tabbable2.default)(_this2.node);\n      _this2.setTabbableChildren();\n    });\n    return _this2;\n  }\n\n  _createClass(View, [{\n    key: 'setCurrent',\n    value: function setCurrent(isCurrent) {\n      this.isCurrent = isCurrent;\n    }\n  }, {\n    key: 'setVisible',\n    value: function setVisible(isVisible) {\n      this.isVisible = isVisible;\n      this.setTabbableChildren();\n    }\n  }, {\n    key: 'setTabbableChildren',\n    value: function setTabbableChildren() {\n      // only allow tabbing in current slides\n      for (var i = 0; i < this.tabbableChildren.length; i++) {\n        this.tabbableChildren[i].tabIndex = this.isCurrent ? 0 : -1;\n      }\n    }\n  }, {\n    key: 'setTarget',\n    value: function setTarget() {\n      var _pager$options2 = this.pager.options,\n          align = _pager$options2.align,\n          viewsToShow = _pager$options2.viewsToShow;\n\n      var target = this.pager.getStartCoords(this.index);\n\n      if (align) {\n        target += this.pager.getAlignOffset(this);\n      }\n\n      this.target = target;\n    }\n  }, {\n    key: 'setOrigin',\n    value: function setOrigin() {\n      var trackPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pager.trackPosition;\n\n      this.origin = this.target - trackPosition;\n    }\n  }, {\n    key: 'getStyles',\n    value: function getStyles() {\n      var _pager$options3 = this.pager.options,\n          axis = _pager$options3.axis,\n          viewsToShow = _pager$options3.viewsToShow,\n          infinite = _pager$options3.infinite;\n\n      var style = {};\n\n      // we need to position views inline when using the x axis\n      if (axis === 'x') {\n        style.display = 'inline-block';\n        style.verticalAlign = 'top';\n      }\n\n      // set width or height on view when viewsToShow is not auto\n      if (viewsToShow !== 'auto') {\n        style[axis === 'x' ? 'width' : 'height'] = 100 / this.pager.views.length + '%';\n      }\n\n      // make sure view stays in frame when using infinite option\n      if (infinite && !this.inBounds) {\n        style.position = 'relative';\n        style[axis === 'y' ? 'top' : 'left'] = this.getPosition();\n      }\n\n      // finally, apply any animations\n      return _extends({}, style, this.pager.animationBus.getStyles(this));\n    }\n  }]);\n\n  return View;\n}(_PagerElement4.default);\n\nvar defaultOptions = {\n  viewsToShow: 1,\n  viewsToMove: 1,\n  align: 0,\n  contain: false,\n  axis: 'x',\n  autoSize: false,\n  animations: [],\n  infinite: false,\n  instant: false,\n  swipe: true,\n  swipeThreshold: 0.5,\n  flickTimeout: 300,\n  accessibility: true\n};\n\nvar Pager = function () {\n  function Pager() {\n    var _this3 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Pager);\n\n    this.hydrate = function () {\n      _this3.frame.setSize();\n      _this3.track.setSize();\n      _this3.views.forEach(function (view) {\n        view.setSize();\n        view.setTarget();\n      });\n      _this3.setPositionValue();\n      _this3.setViewStyles();\n      _this3.emit('hydrated');\n    };\n\n    var emitter = (0, _mitt2.default)();\n\n    this.on = emitter.on;\n    this.emit = emitter.emit;\n    this.off = emitter.off;\n\n    this.views = [];\n    this.currentIndex = 0;\n    this.currentView = null;\n    this.currentTween = 0;\n    this.trackPosition = 0;\n    this.isSwiping = false;\n\n    this.options = _extends({}, defaultOptions, options);\n\n    this.animationBus = new _animationBus2.default({\n      animations: this.options.animations,\n      origin: function origin(view) {\n        return view.origin;\n      }\n    });\n\n    if (isWindowDefined) {\n      this.resizeObserver = new _resizeObserverPolyfill2.default(function () {\n        _this3.hydrate();\n      });\n    }\n  }\n\n  _createClass(Pager, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      var lastOptions = this.options;\n\n      // spread new options over the old ones\n      this.options = _extends({}, this.options, options);\n\n      // merge animations into animation bus\n      this.animationBus.animations = this.options.animations;\n\n      // fire a viewChange event with the new indicies if viewsToShow has changed\n      if (lastOptions.viewsToShow !== this.options.viewsToShow) {\n        this.emit('viewChange', this.getCurrentIndicies());\n      }\n    }\n  }, {\n    key: 'addFrame',\n    value: function addFrame(node) {\n      this.frame = new _PagerElement4.default({\n        node: node,\n        pager: this\n      });\n    }\n  }, {\n    key: 'addTrack',\n    value: function addTrack(node) {\n      this.track = new Track({\n        node: node,\n        pager: this\n      });\n    }\n  }, {\n    key: 'addView',\n    value: function addView(node) {\n      var index = this.views.length;\n      var view = new View({\n        node: node,\n        index: index,\n        pager: this\n      });\n\n      // add view to collection\n      this.views.push(view);\n\n      // set this as the first view if there isn't one yet\n      if (!this.currentView) {\n        this.setCurrentView({\n          index: index,\n          suppressEvent: true\n        });\n      }\n\n      // listen for width and height changes\n      if (isWindowDefined) {\n        this.resizeObserver.observe(node);\n      }\n\n      // fire an event\n      this.emit('viewAdded');\n\n      return view;\n    }\n  }, {\n    key: 'removeView',\n    value: function removeView(view) {\n      // filter out view\n      this.views = this.views.filter(function (_view) {\n        return view !== _view;\n      });\n\n      // stop observing node\n      if (isWindowDefined) {\n        this.resizeObserver.disconnect(view.node);\n      }\n\n      // fire an event\n      this.emit('viewRemoved');\n    }\n  }, {\n    key: 'prev',\n    value: function prev() {\n      this.setCurrentView({ direction: -1 });\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      this.setCurrentView({ direction: 1 });\n    }\n  }, {\n    key: 'setCurrentView',\n    value: function setCurrentView(_ref2) {\n      var _ref2$direction = _ref2.direction,\n          direction = _ref2$direction === undefined ? 0 : _ref2$direction,\n          _ref2$index = _ref2.index,\n          index = _ref2$index === undefined ? this.currentIndex : _ref2$index,\n          _ref2$suppressEvent = _ref2.suppressEvent,\n          suppressEvent = _ref2$suppressEvent === undefined ? false : _ref2$suppressEvent;\n      var _options = this.options,\n          viewsToMove = _options.viewsToMove,\n          infinite = _options.infinite;\n\n      var newIndex = index + direction * viewsToMove;\n\n      var previousIndex = this.currentIndex;\n      var currentIndex = infinite ? newIndex : (0, _utils.clamp)(newIndex, 0, this.views.length - 1);\n\n      var previousView = this.getView(previousIndex);\n      var currentView = this.getView(currentIndex);\n\n      // set current index and view\n      this.currentIndex = currentIndex;\n      this.currentView = currentView;\n\n      // swap current view flags\n      previousView.setCurrent(false);\n      currentView.setCurrent(true);\n\n      var rangeStart = currentIndex;\n      var rangeEnd = currentIndex + viewsToMove - 1;\n      var viewRange = (0, _utils.range)(rangeStart, rangeEnd, this.views.length);\n\n      // set flags for which views are currently showing\n      this.views.forEach(function (view, index) {\n        view.setVisible(index === currentIndex);\n      });\n\n      // set the track position to the new view\n      this.setPositionValue();\n\n      if (!suppressEvent) {\n        this.emit('viewChange', this.getCurrentIndicies());\n      }\n    }\n  }, {\n    key: 'setPositionValue',\n    value: function setPositionValue() {\n      var trackPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentView ? this.currentView.target : 0;\n\n      if (!this.isSwiping) {\n        var _options2 = this.options,\n            viewsToShow = _options2.viewsToShow,\n            autoSize = _options2.autoSize,\n            infinite = _options2.infinite,\n            contain = _options2.contain;\n\n        var trackSize = this.getTrackSize();\n\n        if (infinite) {\n          // we offset by a track multiplier so infinite animation can take advantage of\n          // physics by animating to a large value, the final value provided in getTransformValue\n          // will return the proper wrapped value\n          trackPosition -= (Math.floor(this.currentIndex / this.views.length) || 0) * trackSize;\n        }\n\n        if (contain) {\n          var trackEndOffset = viewsToShow === 'auto' && autoSize || viewsToShow <= 1 ? 0 : this.getFrameSize({ autoSize: false });\n          trackPosition = (0, _utils.clamp)(trackPosition, trackEndOffset - trackSize, 0);\n        }\n      }\n\n      this.trackPosition = trackPosition;\n    }\n  }, {\n    key: 'setViewStyles',\n    value: function setViewStyles() {\n      var trackPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var _options3 = this.options,\n          infinite = _options3.infinite,\n          align = _options3.align;\n\n      var frameSize = this.getFrameSize();\n      var trackSize = this.getTrackSize();\n      var wrappedtrackPosition = (0, _utils.modulo)(trackPosition, -trackSize);\n\n      this.views.reduce(function (lastPosition, view, index) {\n        var viewSize = view.getSize();\n        var nextPosition = lastPosition + viewSize;\n        var position = lastPosition;\n\n        if (nextPosition + viewSize * align < Math.abs(wrappedtrackPosition)) {\n          // shift views around so they are always visible in frame\n          if (infinite) {\n            position += trackSize - lastPosition;\n          }\n          view.inBounds = false;\n        } else {\n          view.inBounds = true;\n        }\n\n        view.setPosition(position);\n        view.setOrigin(trackPosition);\n\n        return nextPosition;\n      }, 0);\n    }\n  }, {\n    key: 'getNumericViewsToShow',\n    value: function getNumericViewsToShow() {\n      return isNaN(this.options.viewsToShow) ? 1 : this.options.viewsToShow;\n    }\n  }, {\n    key: 'getMaxDimensions',\n    value: function getMaxDimensions(indices) {\n      var _this4 = this;\n\n      var axis = this.options.axis;\n\n      var widths = [];\n      var heights = [];\n\n      indices.forEach(function (index) {\n        var view = isNaN(index) ? index : _this4.getView(index);\n        widths.push(view.getSize('width'));\n        heights.push(view.getSize('height'));\n      });\n\n      return {\n        width: axis === 'x' ? (0, _utils.sum)(widths) : (0, _utils.max)(widths),\n        height: axis === 'y' ? (0, _utils.sum)(heights) : (0, _utils.max)(heights)\n      };\n    }\n  }, {\n    key: 'getCurrentIndicies',\n    value: function getCurrentIndicies() {\n      var _options4 = this.options,\n          infinite = _options4.infinite,\n          contain = _options4.contain;\n\n      var currentViews = [];\n      var viewsToShow = isNaN(this.options.viewsToShow) ? 1 : this.options.viewsToShow;\n      var minIndex = this.currentIndex;\n      var maxIndex = this.currentIndex + (viewsToShow - 1);\n\n      if (contain) {\n        // if containing, we need to clamp the start and end indexes so we only return what's in view\n        minIndex = (0, _utils.clamp)(minIndex, 0, this.views.length - viewsToShow);\n        maxIndex = (0, _utils.clamp)(maxIndex, 0, this.views.length - 1);\n        for (var i = minIndex; i <= maxIndex; i++) {\n          currentViews.push(i);\n        }\n      } else {\n        for (var _i = minIndex; _i <= maxIndex; _i++) {\n          currentViews.push(infinite ? (0, _utils.modulo)(_i, this.views.length) : (0, _utils.clamp)(_i, 0, this.views.length - 1));\n        }\n      }\n\n      return currentViews;\n    }\n  }, {\n    key: 'getFrameSize',\n    value: function getFrameSize() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$autoSize = _ref3.autoSize,\n          autoSize = _ref3$autoSize === undefined ? this.options.autoSize : _ref3$autoSize,\n          _ref3$fullSize = _ref3.fullSize,\n          fullSize = _ref3$fullSize === undefined ? false : _ref3$fullSize;\n\n      var dimensions = {\n        width: 0,\n        height: 0\n      };\n\n      if (this.views.length) {\n        if (autoSize) {\n          var currentViews = this.getCurrentIndicies();\n          dimensions = this.getMaxDimensions(currentViews);\n        } else if (this.frame) {\n          dimensions = {\n            width: this.frame.getSize('width'),\n            height: this.frame.getSize('height')\n          };\n        }\n      }\n\n      if (fullSize) {\n        return dimensions;\n      } else {\n        return dimensions[this.options.axis === 'x' ? 'width' : 'height'];\n      }\n    }\n  }, {\n    key: 'getTrackSize',\n    value: function getTrackSize() {\n      var includeLastSlide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var lastIndex = includeLastSlide ? this.views.length : this.views.length - 1;\n      var size = 0;\n      this.views.slice(0, lastIndex).forEach(function (view) {\n        size += view.getSize();\n      });\n      return size;\n    }\n  }, {\n    key: 'getView',\n    value: function getView(index) {\n      return this.views[(0, _utils.modulo)(index, this.views.length)];\n    }\n\n    // where the view should start\n\n  }, {\n    key: 'getStartCoords',\n    value: function getStartCoords(index) {\n      var target = 0;\n      this.views.slice(0, index).forEach(function (view) {\n        target -= view.getSize();\n      });\n      return target;\n    }\n\n    // how much to offset the view defined by the align option\n\n  }, {\n    key: 'getAlignOffset',\n    value: function getAlignOffset(view) {\n      var frameSize = this.getFrameSize({ autoSize: false });\n      var viewSize = view.getSize();\n      return (frameSize - viewSize) * this.options.align;\n    }\n  }, {\n    key: 'getPositionValue',\n    value: function getPositionValue() {\n      var trackPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.trackPosition;\n      var _options5 = this.options,\n          infinite = _options5.infinite,\n          contain = _options5.contain;\n\n      var position = { x: 0, y: 0\n\n        // store the current animated value so we can reference it later\n      };this.currentTween = trackPosition;\n\n      // wrap the track position if this is an infinite track\n      if (infinite) {\n        var trackSize = this.getTrackSize();\n        trackPosition = (0, _utils.modulo)(trackPosition, -trackSize) || 0;\n      }\n\n      // emit a \"scroll\" event so we can do things based on the progress of the track\n      this.emit('scroll', {\n        progress: trackPosition / this.getTrackSize(false),\n        position: trackPosition\n      });\n\n      // set the proper transform axis based on our options\n      position[this.options.axis] = trackPosition;\n\n      return position;\n    }\n  }, {\n    key: 'resetViewIndex',\n    value: function resetViewIndex() {\n      // reset back to a normal index\n      this.setCurrentView({\n        index: (0, _utils.modulo)(this.currentIndex, this.views.length),\n        suppressEvent: true\n      });\n    }\n  }]);\n\n  return Pager;\n}();\n\nexports.default = Pager;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///209\n")},724:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PagerElement = function () {\n  function PagerElement(_ref) {\n    var node = _ref.node,\n        pager = _ref.pager,\n        width = _ref.width,\n        height = _ref.height;\n\n    _classCallCheck(this, PagerElement);\n\n    this.node = node;\n    this.pager = pager;\n    this.x = this.y = 0;\n    this.setSize(width, height);\n  }\n\n  _createClass(PagerElement, [{\n    key: 'setSize',\n    value: function setSize(width, height) {\n      this.width = width || this.node.offsetWidth;\n      this.height = height || this.node.offsetHeight;\n    }\n  }, {\n    key: 'setPosition',\n    value: function setPosition(position) {\n      this[this.pager.options.axis] = position;\n    }\n  }, {\n    key: 'getSize',\n    value: function getSize(dimension) {\n      if (dimension === 'width' || dimension === 'height') {\n        return this[dimension];\n      } else {\n        var axis = this.pager.options.axis;\n        return this[axis === 'x' ? 'width' : 'height'];\n      }\n    }\n  }, {\n    key: 'getPosition',\n    value: function getPosition() {\n      return this[this.pager.options.axis];\n    }\n  }]);\n\n  return PagerElement;\n}();\n\nexports.default = PagerElement;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpZXctcGFnZXIvbGliL1BhZ2VyRWxlbWVudC5qcz9hZTczIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFBhZ2VyRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFnZXJFbGVtZW50KF9yZWYpIHtcbiAgICB2YXIgbm9kZSA9IF9yZWYubm9kZSxcbiAgICAgICAgcGFnZXIgPSBfcmVmLnBhZ2VyLFxuICAgICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VyRWxlbWVudCk7XG5cbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMucGFnZXIgPSBwYWdlcjtcbiAgICB0aGlzLnggPSB0aGlzLnkgPSAwO1xuICAgIHRoaXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYWdlckVsZW1lbnQsIFt7XG4gICAga2V5OiAnc2V0U2l6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgdGhpcy53aWR0aCA9IHdpZHRoIHx8IHRoaXMubm9kZS5vZmZzZXRXaWR0aDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IHRoaXMubm9kZS5vZmZzZXRIZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgICAgdGhpc1t0aGlzLnBhZ2VyLm9wdGlvbnMuYXhpc10gPSBwb3NpdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2l6ZShkaW1lbnNpb24pIHtcbiAgICAgIGlmIChkaW1lbnNpb24gPT09ICd3aWR0aCcgfHwgZGltZW5zaW9uID09PSAnaGVpZ2h0Jykge1xuICAgICAgICByZXR1cm4gdGhpc1tkaW1lbnNpb25dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGF4aXMgPSB0aGlzLnBhZ2VyLm9wdGlvbnMuYXhpcztcbiAgICAgICAgcmV0dXJuIHRoaXNbYXhpcyA9PT0gJ3gnID8gJ3dpZHRoJyA6ICdoZWlnaHQnXTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvc2l0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXNbdGhpcy5wYWdlci5vcHRpb25zLmF4aXNdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYWdlckVsZW1lbnQ7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBhZ2VyRWxlbWVudDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///724\n")},735:function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = __webpack_require__(514);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Keyboard = function () {\n  function Keyboard(pager) {\n    var _this = this;\n\n    _classCallCheck(this, Keyboard);\n\n    this._handleKeyDown = function (e) {\n      // handle respective key controls\n      switch (e.key) {\n        // move to the previous view\n        case 'ArrowUp':\n        case 'ArrowLeft':\n          _this.pager.prev();\n          return;\n\n        // move to the next view\n        case 'ArrowDown':\n        case 'ArrowRight':\n        case ' ':\n          _this.pager.next();\n          return;\n\n        // move to first view\n        case 'Home':\n          _this.pager.setCurrentView({ index: 0 });\n          return;\n\n        // move to last view\n        case 'End':\n          _this.pager.setCurrentView({ index: _this.pager.views.length - 1 });\n          return;\n      }\n\n      // 1 - 9 keys mapped to respective slide number\n      var maxNumKey = (0, _utils.clamp)(_this.pager.views.length, 0, 9);\n\n      for (var i = 1; i <= maxNumKey; i++) {\n        if (+e.key === i) {\n          _this.pager.setCurrentView({ index: i - 1 });\n        }\n      }\n    };\n\n    this.pager = pager;\n  }\n\n  _createClass(Keyboard, [{\n    key: 'getEvents',\n    value: function getEvents() {\n      var keyboardEvents = {};\n\n      if (this.pager.options.accessibility) {\n        keyboardEvents.onKeyDown = this._handleKeyDown;\n      }\n\n      return keyboardEvents;\n    }\n  }]);\n\n  return Keyboard;\n}();\n\nexports.default = Keyboard;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXZpZXctcGFnZXIvbGliL0tleWJvYXJkLmpzP2MyZWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgS2V5Ym9hcmQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWJvYXJkKHBhZ2VyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBLZXlib2FyZCk7XG5cbiAgICB0aGlzLl9oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIGhhbmRsZSByZXNwZWN0aXZlIGtleSBjb250cm9sc1xuICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAvLyBtb3ZlIHRvIHRoZSBwcmV2aW91cyB2aWV3XG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICAgIF90aGlzLnBhZ2VyLnByZXYoKTtcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgLy8gbW92ZSB0byB0aGUgbmV4dCB2aWV3XG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICBfdGhpcy5wYWdlci5uZXh0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIC8vIG1vdmUgdG8gZmlyc3Qgdmlld1xuICAgICAgICBjYXNlICdIb21lJzpcbiAgICAgICAgICBfdGhpcy5wYWdlci5zZXRDdXJyZW50Vmlldyh7IGluZGV4OiAwIH0pO1xuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAvLyBtb3ZlIHRvIGxhc3Qgdmlld1xuICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICAgIF90aGlzLnBhZ2VyLnNldEN1cnJlbnRWaWV3KHsgaW5kZXg6IF90aGlzLnBhZ2VyLnZpZXdzLmxlbmd0aCAtIDEgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyAxIC0gOSBrZXlzIG1hcHBlZCB0byByZXNwZWN0aXZlIHNsaWRlIG51bWJlclxuICAgICAgdmFyIG1heE51bUtleSA9ICgwLCBfdXRpbHMuY2xhbXApKF90aGlzLnBhZ2VyLnZpZXdzLmxlbmd0aCwgMCwgOSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IG1heE51bUtleTsgaSsrKSB7XG4gICAgICAgIGlmICgrZS5rZXkgPT09IGkpIHtcbiAgICAgICAgICBfdGhpcy5wYWdlci5zZXRDdXJyZW50Vmlldyh7IGluZGV4OiBpIC0gMSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnBhZ2VyID0gcGFnZXI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoS2V5Ym9hcmQsIFt7XG4gICAga2V5OiAnZ2V0RXZlbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RXZlbnRzKCkge1xuICAgICAgdmFyIGtleWJvYXJkRXZlbnRzID0ge307XG5cbiAgICAgIGlmICh0aGlzLnBhZ2VyLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSkge1xuICAgICAgICBrZXlib2FyZEV2ZW50cy5vbktleURvd24gPSB0aGlzLl9oYW5kbGVLZXlEb3duO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ga2V5Ym9hcmRFdmVudHM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEtleWJvYXJkO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBLZXlib2FyZDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///735\n")}}]);